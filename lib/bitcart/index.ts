/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * BitcartCC
 * BitcartCC Merchants API
 * OpenAPI spec version: 0.7.4.1
 */
import type { AxiosRequestConfig, AxiosResponse } from 'axios';
import axios from 'axios';

import type {
  BackupsPolicy,
  BalanceResponse,
  BatchSettings,
  BodyCreateFileFilesPost,
  BodyCreateOauth2TokenTokenOauth2Post,
  BodyCreateProductProductsPost,
  BodyInstallPluginPluginsInstallPost,
  BodyModifyFileFilesModelIdPatch,
  BodyModifyProductProductsModelIdPatch,
  BodyRestoreBackupManageBackupsRestorePost,
  CategoriesProductsCategoriesGetParams as CategoriesProductsCategoriesGetParameters,
  ChangePassword,
  CheckDnsEntryConfiguratorDnsResolveGetParams as CheckDnsEntryConfiguratorDnsResolveGetParameters,
  CloseChannelScheme,
  ConfiguratorDeploySettings,
  CreateDiscount,
  CreateInvoice,
  CreateNotification,
  CreatePayout,
  CreateStore,
  CreateTemplate,
  CreateUser,
  CreateUserWithToken,
  CreateWallet,
  CreateWalletData,
  CustomerUpdateData,
  Discount,
  DisplayInvoice,
  DisplayPayout,
  DisplayUser,
  EditToken,
  ExportInvoicesInvoicesExportGetParams as ExportInvoicesExportGetParameters,
  FIDO2Auth,
  File,
  GetDiscountsDiscountsGetParams as GetDiscountsGetParameters,
  GetFiatlistCryptosFiatlistGetParams as GetFiatlistCryptosFiatlistGetParameters,
  GetFilesFilesGetParams as GetFilesGetParameters,
  GetInvoicesInvoicesGetParams as GetInvoicesGetParameters,
  GetMaxProductPriceProductsMaxpriceGetParams as GetMaxProductPriceProductsMaxpriceGetParameters,
  GetNotificationsNotificationsGetParams as GetNotificationsGetParameters,
  GetNumberOfProductsProductsCountGetParams as GetNumberOfProductsCountGetParameters,
  GetOrCreateShopifyInvoiceStoresStoreIdIntegrationsShopifyOrderIdGetParams as GetOrCreateShopifyInvoiceStoresStoreIdIntegrationsShopifyOrderIdGetParameters,
  GetPayoutsPayoutsGetParams as GetPayoutsGetParameters,
  GetProductByIdProductsModelIdGetParams as GetProductByIdProductsModelIdGetParameters,
  GetProductsProductsGetParams as GetProductsGetParameters,
  GetStoreRatesStoresModelIdRatesGetParams as GetStoreRatesStoresModelIdRatesGetParameters,
  GetStoresStoresGetParams as GetStoresGetParameters,
  GetTemplateListTemplatesListGetParams as GetTemplateListTemplatesListGetParameters,
  GetTemplatesTemplatesGetParams as GetTemplatesGetParameters,
  GetTokenCountTokenCountGetParams as GetTokenCountTokenCountGetParameters,
  GetTokensTokenGetParams as GetTokensTokenGetParameters,
  GetUsersUsersGetParams as GetUsersGetParameters,
  GetWalletRateWalletsModelIdRateGetParams as GetWalletRateWalletsModelIdRateGetParameters,
  GetWalletsWalletsGetParams as GetWalletsGetParameters,
  GlobalStorePolicy,
  HTTPCreateLoginToken,
  LNPayScheme,
  LoginFIDOData,
  MethodUpdateData,
  Notification,
  OpenChannelScheme,
  OptionalCreateWallet,
  OptionalDiscount,
  OptionalInvoice,
  OptionalNotification,
  OptionalPayout,
  OptionalStore,
  OptionalTemplate,
  OptionalUser,
  PaginationResponseDiscount,
  PaginationResponseDisplayInvoice,
  PaginationResponseDisplayPayout,
  PaginationResponseDisplayUser,
  PaginationResponseFile,
  PaginationResponseNotification,
  PaginationResponseProduct,
  PaginationResponseStore,
  PaginationResponseTemplate,
  PaginationResponseToken,
  PaginationResponseWallet,
  Policy,
  Product,
  RateCryptosRateGetParams as RateCryptosRateGetParameters,
  RatesResponse,
  Refund,
  RefundData,
  ResetPasswordData,
  ResetPasswordFinalize,
  SSHSettings,
  Store,
  StoreCheckoutSettings,
  StorePluginSettings,
  StoreThemeSettings,
  SubmitRefundData,
  Template,
  Token,
  TOTPAuth,
  TxResponse,
  UninstallPluginData,
  User,
  UserPreferences,
  VerifyEmailData,
  VerifyTOTP,
  Wallet
} from './models';

/**
 * @summary All Wallet History
 */
export const allWalletHistoryWalletsHistoryAllGet = <
  TData = AxiosResponse<TxResponse[]>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/wallets/history/all', options);
};

/**
 * @summary Batch Action
 */
export const batchActionTokenBatchPost = <TData = AxiosResponse<unknown>>(
  batchSettings: BatchSettings,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/token/batch', batchSettings, options);
};

/**
 * @summary Batch Actions On Discounts
 */
export const batchActionsOnDiscountsDiscountsBatchPost = <
  TData = AxiosResponse<unknown>
>(
  batchSettings: BatchSettings,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/discounts/batch', batchSettings, options);
};

/**
 * @summary Batch Actions On Files
 */
export const batchActionsOnFilesFilesBatchPost = <
  TData = AxiosResponse<unknown>
>(
  batchSettings: BatchSettings,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/files/batch', batchSettings, options);
};

/**
 * @summary Batch Actions On Invoices
 */
export const batchActionsOnInvoicesInvoicesBatchPost = <
  TData = AxiosResponse<unknown>
>(
  batchSettings: BatchSettings,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/invoices/batch', batchSettings, options);
};

/**
 * @summary Batch Actions On Notifications
 */
export const batchActionsOnNotificationsNotificationsBatchPost = <
  TData = AxiosResponse<unknown>
>(
  batchSettings: BatchSettings,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/notifications/batch', batchSettings, options);
};

/**
 * @summary Batch Actions On Payouts
 */
export const batchActionsOnPayoutsPayoutsBatchPost = <
  TData = AxiosResponse<unknown>
>(
  batchSettings: BatchSettings,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/payouts/batch', batchSettings, options);
};

/**
 * @summary Batch Actions On Products
 */
export const batchActionsOnProductsProductsBatchPost = <
  TData = AxiosResponse<unknown>
>(
  batchSettings: BatchSettings,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/products/batch', batchSettings, options);
};

/**
 * @summary Batch Actions On Stores
 */
export const batchActionsOnStoresStoresBatchPost = <
  TData = AxiosResponse<unknown>
>(
  batchSettings: BatchSettings,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/stores/batch', batchSettings, options);
};

/**
 * @summary Batch Actions On Templates
 */
export const batchActionsOnTemplatesTemplatesBatchPost = <
  TData = AxiosResponse<unknown>
>(
  batchSettings: BatchSettings,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/templates/batch', batchSettings, options);
};

/**
 * @summary Batch Actions On Users
 */
export const batchActionsOnUsersUsersBatchPost = <
  TData = AxiosResponse<unknown>
>(
  batchSettings: BatchSettings,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/users/batch', batchSettings, options);
};

/**
 * @summary Batch Actions On Wallets
 */
export const batchActionsOnWalletsWalletsBatchPost = <
  TData = AxiosResponse<unknown>
>(
  batchSettings: BatchSettings,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/wallets/batch', batchSettings, options);
};

/**
 * @summary Categories
 */
export const categoriesProductsCategoriesGet = <TData = AxiosResponse<unknown>>(
  parameters: CategoriesProductsCategoriesGetParameters,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/products/categories', {
    ...options,
    params: { ...parameters, ...options?.params }
  });
};

/**
 * @summary Change Password
 */
export const changePasswordUsersPasswordPost = <TData = AxiosResponse<unknown>>(
  changePassword: ChangePassword,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/users/password', changePassword, options);
};

/**
 * @summary Check Dns Entry
 */
export const checkDnsEntryConfiguratorDnsResolveGet = <
  TData = AxiosResponse<unknown>
>(
  parameters: CheckDnsEntryConfiguratorDnsResolveGetParameters,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/configurator/dns-resolve', {
    ...options,
    params: { ...parameters, ...options?.params }
  });
};

/**
 * @summary Check Updates
 */
export const checkUpdatesUpdateCheckGet = <TData = AxiosResponse<unknown>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/update/check', options);
};

/**
 * @summary Check Wallet Lightning
 */
export const checkWalletLightningWalletsModelIdChecklnGet = <
  TData = AxiosResponse<unknown>
>(
  modelId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/wallets/${modelId}/checkln`, options);
};

/**
 * @summary Cleanup Images
 */
export const cleanupImagesManageCleanupImagesPost = <
  TData = AxiosResponse<unknown>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/manage/cleanup/images', undefined, options);
};

/**
 * @summary Cleanup Logs
 */
export const cleanupLogsManageCleanupLogsPost = <
  TData = AxiosResponse<unknown>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/manage/cleanup/logs', undefined, options);
};

/**
 * @summary Cleanup Server
 */
export const cleanupServerManageCleanupPost = <TData = AxiosResponse<unknown>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/manage/cleanup', undefined, options);
};

/**
 * @summary Close Wallet Channel
 */
export const closeWalletChannelWalletsModelIdChannelsClosePost = <
  TData = AxiosResponse<unknown>
>(
  modelId: string,
  closeChannelScheme: CloseChannelScheme,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `/wallets/${modelId}/channels/close`,
    closeChannelScheme,
    options
  );
};

/**
 * @summary Create Discount
 */
export const createDiscountDiscountsPost = <TData = AxiosResponse<Discount>>(
  createDiscount: CreateDiscount,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/discounts', createDiscount, options);
};

/**
 * @summary Create File
 */
export const createFileFilesPost = <TData = AxiosResponse<File>>(
  bodyCreateFileFilesPost: BodyCreateFileFilesPost,
  options?: AxiosRequestConfig
): Promise<TData> => {
  const formData = new FormData();
  formData.append('file', bodyCreateFileFilesPost.file);

  return axios.post('/files', formData, options);
};

/**
 * @summary Create Invoice
 */
export const createInvoiceInvoicesPost = <
  TData = AxiosResponse<DisplayInvoice>
>(
  createInvoice: CreateInvoice,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/invoices', createInvoice, options);
};

/**
 * @summary Create Notification
 */
export const createNotificationNotificationsPost = <
  TData = AxiosResponse<Notification>
>(
  createNotification: CreateNotification,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/notifications', createNotification, options);
};

/**
 * @summary Create Oauth2 Token
 */
export const createOauth2TokenTokenOauth2Post = <
  TData = AxiosResponse<unknown>
>(
  bodyCreateOauth2TokenTokenOauth2Post: BodyCreateOauth2TokenTokenOauth2Post,
  options?: AxiosRequestConfig
): Promise<TData> => {
  const formUrlEncoded = new URLSearchParams();
  if (bodyCreateOauth2TokenTokenOauth2Post.grant_type !== undefined) {
    formUrlEncoded.append(
      'grant_type',
      bodyCreateOauth2TokenTokenOauth2Post.grant_type
    );
  }
  formUrlEncoded.append(
    'username',
    bodyCreateOauth2TokenTokenOauth2Post.username
  );
  formUrlEncoded.append(
    'password',
    bodyCreateOauth2TokenTokenOauth2Post.password
  );
  if (bodyCreateOauth2TokenTokenOauth2Post.scope !== undefined) {
    formUrlEncoded.append('scope', bodyCreateOauth2TokenTokenOauth2Post.scope);
  }
  if (bodyCreateOauth2TokenTokenOauth2Post.client_id !== undefined) {
    formUrlEncoded.append(
      'client_id',
      bodyCreateOauth2TokenTokenOauth2Post.client_id
    );
  }
  if (bodyCreateOauth2TokenTokenOauth2Post.client_secret !== undefined) {
    formUrlEncoded.append(
      'client_secret',
      bodyCreateOauth2TokenTokenOauth2Post.client_secret
    );
  }

  return axios.post('/token/oauth2', formUrlEncoded, options);
};

/**
 * @summary Create Payout
 */
export const createPayoutPayoutsPost = <TData = AxiosResponse<DisplayPayout>>(
  createPayout: CreatePayout,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/payouts', createPayout, options);
};

/**
 * @summary Create Product
 */
export const createProductProductsPost = <TData = AxiosResponse<Product>>(
  bodyCreateProductProductsPost: BodyCreateProductProductsPost,
  options?: AxiosRequestConfig
): Promise<TData> => {
  const formData = new FormData();
  formData.append('data', bodyCreateProductProductsPost.data);
  if (bodyCreateProductProductsPost.image !== undefined) {
    formData.append('image', bodyCreateProductProductsPost.image);
  }

  return axios.post('/products', formData, options);
};

/**
 * @summary Create Store
 */
export const createStoreStoresPost = <TData = AxiosResponse<Store>>(
  createStore: CreateStore,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/stores', createStore, options);
};

/**
 * @summary Create Template
 */
export const createTemplateTemplatesPost = <TData = AxiosResponse<Template>>(
  createTemplate: CreateTemplate,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/templates', createTemplate, options);
};

/**
 * @summary Create Token Fido2 Begin
 */
export const createTokenFido2BeginToken2faFido2BeginPost = <
  TData = AxiosResponse<unknown>
>(
  fIDO2Auth: FIDO2Auth,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/token/2fa/fido2/begin', fIDO2Auth, options);
};

/**
 * @summary Create Token Fido2 Complete
 */
export const createTokenFido2CompleteToken2faFido2CompletePost = <
  TData = AxiosResponse<unknown>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/token/2fa/fido2/complete', undefined, options);
};

/**
 * @summary Create Token
 */
export const createTokenTokenPost = <TData = AxiosResponse<unknown>>(
  hTTPCreateLoginToken: HTTPCreateLoginToken,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/token', hTTPCreateLoginToken, options);
};

/**
 * @summary Create Token Totp Auth
 */
export const createTokenTotpAuthToken2faTotpPost = <
  TData = AxiosResponse<unknown>
>(
  tOTPAuth: TOTPAuth,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/token/2fa/totp', tOTPAuth, options);
};

/**
 * @summary Create User
 */
export const createUserUsersPost = <TData = AxiosResponse<CreateUserWithToken>>(
  createUser: CreateUser,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/users', createUser, options);
};

/**
 * @summary Create Wallet
 */
export const createWalletWalletsCreatePost = <TData = AxiosResponse<unknown>>(
  createWalletData: CreateWalletData,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/wallets/create', createWalletData, options);
};

/**
 * @summary Create Wallet
 */
export const createWalletWalletsPost = <TData = AxiosResponse<Wallet>>(
  createWallet: CreateWallet,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/wallets', createWallet, options);
};

/**
 * @summary Delete Discount
 */
export const deleteDiscountDiscountsModelIdDelete = <
  TData = AxiosResponse<Discount>
>(
  modelId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`/discounts/${modelId}`, options);
};

/**
 * @summary Delete File
 */
export const deleteFileFilesModelIdDelete = <TData = AxiosResponse<File>>(
  modelId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`/files/${modelId}`, options);
};

/**
 * @summary Delete Invoice
 */
export const deleteInvoiceInvoicesModelIdDelete = <
  TData = AxiosResponse<DisplayInvoice>
>(
  modelId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`/invoices/${modelId}`, options);
};

/**
 * @summary Delete Log
 */
export const deleteLogManageLogsLogDelete = <TData = AxiosResponse<unknown>>(
  log: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`/manage/logs/${log}`, options);
};

/**
 * @summary Delete Notification
 */
export const deleteNotificationNotificationsModelIdDelete = <
  TData = AxiosResponse<Notification>
>(
  modelId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`/notifications/${modelId}`, options);
};

/**
 * @summary Delete Payout
 */
export const deletePayoutPayoutsModelIdDelete = <
  TData = AxiosResponse<DisplayPayout>
>(
  modelId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`/payouts/${modelId}`, options);
};

/**
 * @summary Delete Product
 */
export const deleteProductProductsModelIdDelete = <
  TData = AxiosResponse<Product>
>(
  modelId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`/products/${modelId}`, options);
};

/**
 * @summary Delete Store
 */
export const deleteStoreStoresModelIdDelete = <TData = AxiosResponse<Store>>(
  modelId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`/stores/${modelId}`, options);
};

/**
 * @summary Delete Template
 */
export const deleteTemplateTemplatesModelIdDelete = <
  TData = AxiosResponse<Template>
>(
  modelId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`/templates/${modelId}`, options);
};

/**
 * @summary Delete Token
 */
export const deleteTokenTokenModelIdDelete = <TData = AxiosResponse<Token>>(
  modelId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`/token/${modelId}`, options);
};

/**
 * @summary Delete User
 */
export const deleteUserUsersModelIdDelete = <
  TData = AxiosResponse<DisplayUser>
>(
  modelId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`/users/${modelId}`, options);
};

/**
 * @summary Delete Wallet
 */
export const deleteWalletWalletsModelIdDelete = <TData = AxiosResponse<Wallet>>(
  modelId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`/wallets/${modelId}`, options);
};

/**
 * @summary Disable Totp
 */
export const disableTotpUsers2faDisablePost = <TData = AxiosResponse<unknown>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/users/2fa/disable', undefined, options);
};

/**
 * @summary Download Backup
 */
export const downloadBackupManageBackupsDownloadFileIdGet = <
  TData = AxiosResponse<unknown>
>(
  fileId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/manage/backups/download/${fileId}`, options);
};

/**
 * @summary Export Invoices
 */
export const exportInvoicesInvoicesExportGet = <TData = AxiosResponse<unknown>>(
  parameters?: ExportInvoicesExportGetParameters,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/invoices/export', {
    ...options,
    params: { ...parameters, ...options?.params }
  });
};

/**
 * @summary Fido2 Complete Registration
 */
export const fido2CompleteRegistrationUsers2faFido2RegisterCompletePost = <
  TData = AxiosResponse<unknown>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/users/2fa/fido2/register/complete', undefined, options);
};

/**
 * @summary Fido2 Delete Device
 */
export const fido2DeleteDeviceUsers2faFido2DeviceIdDelete = <
  TData = AxiosResponse<unknown>
>(
  deviceId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`/users/2fa/fido2/${deviceId}`, options);
};

/**
 * @summary Finalize Email Verification
 */
export const finalizeEmailVerificationUsersVerifyFinalizeCodePost = <
  TData = AxiosResponse<unknown>
>(
  code: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(`/users/verify/finalize/${code}`, undefined, options);
};

/**
 * @summary Finalize Password Reset
 */
export const finalizePasswordResetUsersResetPasswordFinalizeCodePost = <
  TData = AxiosResponse<unknown>
>(
  code: string,
  resetPasswordFinalize: ResetPasswordFinalize,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `/users/reset_password/finalize/${code}`,
    resetPasswordFinalize,
    options
  );
};

/**
 * @summary Generate Deployment
 */
export const generateDeploymentConfiguratorDeployPost = <
  TData = AxiosResponse<unknown>
>(
  configuratorDeploySettings: ConfiguratorDeploySettings,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    '/configurator/deploy',
    configuratorDeploySettings,
    options
  );
};

/**
 * @summary Get Backup Frequencies
 */
export const getBackupFrequenciesManageBackupsFrequenciesGet = <
  TData = AxiosResponse<unknown>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/manage/backups/frequencies', options);
};

/**
 * @summary Get Backup Policies
 */
export const getBackupPoliciesManageBackupsGet = <
  TData = AxiosResponse<BackupsPolicy>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/manage/backups', options);
};

/**
 * @summary Get Backup Providers
 */
export const getBackupProvidersManageBackupsProvidersGet = <
  TData = AxiosResponse<unknown>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/manage/backups/providers', options);
};

/**
 * @summary Get Balances
 */
export const getBalancesWalletsBalanceGet = <TData = AxiosResponse<string>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/wallets/balance', options);
};

/**
 * @summary Get Cryptos
 */
export const getCryptosCryptosGet = <TData = AxiosResponse<unknown>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/cryptos', options);
};

/**
 * @summary Get Current Token
 */
export const getCurrentTokenTokenCurrentGet = <TData = AxiosResponse<Token>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/token/current', options);
};

/**
 * @summary Get Daemons
 */
export const getDaemonsManageDaemonsGet = <TData = AxiosResponse<unknown>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/manage/daemons', options);
};

/**
 * @summary Get Default Explorer
 */
export const getDefaultExplorerCryptosExplorerCurrencyGet = <
  TData = AxiosResponse<unknown>
>(
  currency: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/cryptos/explorer/${currency}`, options);
};

/**
 * @summary Get Default Rpc
 */
export const getDefaultRpcCryptosRpcCurrencyGet = <
  TData = AxiosResponse<unknown>
>(
  currency: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/cryptos/rpc/${currency}`, options);
};

/**
 * @summary Get Deploy Result
 */
export const getDeployResultConfiguratorDeployResultDeployIdGet = <
  TData = AxiosResponse<unknown>
>(
  deployId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/configurator/deploy-result/${deployId}`, options);
};

/**
 * @summary Get Discount By Id
 */
export const getDiscountByIdDiscountsModelIdGet = <
  TData = AxiosResponse<Discount>
>(
  modelId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/discounts/${modelId}`, options);
};

/**
 * @summary Get Discounts
 */
export const getDiscountsDiscountsGet = <
  TData = AxiosResponse<PaginationResponseDiscount>
>(
  parameters?: GetDiscountsGetParameters,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/discounts', {
    ...options,
    params: { ...parameters, ...options?.params }
  });
};

/**
 * @summary Get Fiatlist
 */
export const getFiatlistCryptosFiatlistGet = <TData = AxiosResponse<unknown>>(
  parameters?: GetFiatlistCryptosFiatlistGetParameters,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/cryptos/fiatlist', {
    ...options,
    params: { ...parameters, ...options?.params }
  });
};

/**
 * @summary Get File By Id
 */
export const getFileByIdFilesModelIdGet = <TData = AxiosResponse<File>>(
  modelId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/files/${modelId}`, options);
};

/**
 * @summary Get Files
 */
export const getFilesFilesGet = <TData = AxiosResponse<PaginationResponseFile>>(
  parameters?: GetFilesGetParameters,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/files', {
    ...options,
    params: { ...parameters, ...options?.params }
  });
};

/**
 * @summary Get Invoice By Id
 */
export const getInvoiceByIdInvoicesModelIdGet = <
  TData = AxiosResponse<DisplayInvoice>
>(
  modelId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/invoices/${modelId}`, options);
};

/**
 * @summary Get Invoices
 */
export const getInvoicesInvoicesGet = <
  TData = AxiosResponse<PaginationResponseDisplayInvoice>
>(
  parameters?: GetInvoicesGetParameters,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/invoices', {
    ...options,
    params: { ...parameters, ...options?.params }
  });
};

/**
 * @summary Get Log Contents
 */
export const getLogContentsManageLogsLogGet = <TData = AxiosResponse<unknown>>(
  log: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/manage/logs/${log}`, options);
};

/**
 * @summary Get Logs List
 */
export const getLogsListManageLogsGet = <TData = AxiosResponse<unknown>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/manage/logs', options);
};

/**
 * @summary Get Max Product Price
 */
export const getMaxProductPriceProductsMaxpriceGet = <
  TData = AxiosResponse<unknown>
>(
  parameters: GetMaxProductPriceProductsMaxpriceGetParameters,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/products/maxprice', {
    ...options,
    params: { ...parameters, ...options?.params }
  });
};

/**
 * @summary Get Me
 */
export const getMeUsersMeGet = <TData = AxiosResponse<DisplayUser>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/users/me', options);
};

/**
 * @summary Get Notification By Id
 */
export const getNotificationByIdNotificationsModelIdGet = <
  TData = AxiosResponse<Notification>
>(
  modelId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/notifications/${modelId}`, options);
};

/**
 * @summary Get Notifications
 */
export const getNotificationsNotificationsGet = <
  TData = AxiosResponse<PaginationResponseNotification>
>(
  parameters?: GetNotificationsGetParameters,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/notifications', {
    ...options,
    params: { ...parameters, ...options?.params }
  });
};

/**
 * @summary Get Notifications
 */
export const getNotificationsNotificationsListGet = <
  TData = AxiosResponse<unknown>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/notifications/list', options);
};

/**
 * @summary Get Notifications Schema
 */
export const getNotificationsSchemaNotificationsSchemaGet = <
  TData = AxiosResponse<unknown>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/notifications/schema', options);
};

/**
 * @summary Get Number Of Discounts
 */
export const getNumberOfDiscountsDiscountsCountGet = <
  TData = AxiosResponse<number>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/discounts/count', options);
};

/**
 * @summary Get Number Of Files
 */
export const getNumberOfFilesFilesCountGet = <TData = AxiosResponse<number>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/files/count', options);
};

/**
 * @summary Get Number Of Invoices
 */
export const getNumberOfInvoicesInvoicesCountGet = <
  TData = AxiosResponse<number>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/invoices/count', options);
};

/**
 * @summary Get Number Of Notifications
 */
export const getNumberOfNotificationsNotificationsCountGet = <
  TData = AxiosResponse<number>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/notifications/count', options);
};

/**
 * @summary Get Number Of Payouts
 */
export const getNumberOfPayoutsPayoutsCountGet = <
  TData = AxiosResponse<number>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/payouts/count', options);
};

/**
 * @summary Get Number Of Products
 */
export const getNumberOfProductsProductsCountGet = <
  TData = AxiosResponse<number>
>(
  parameters?: GetNumberOfProductsCountGetParameters,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/products/count', {
    ...options,
    params: { ...parameters, ...options?.params }
  });
};

/**
 * @summary Get Number Of Stores
 */
export const getNumberOfStoresStoresCountGet = <TData = AxiosResponse<number>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/stores/count', options);
};

/**
 * @summary Get Number Of Templates
 */
export const getNumberOfTemplatesTemplatesCountGet = <
  TData = AxiosResponse<number>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/templates/count', options);
};

/**
 * @summary Get Number Of Users
 */
export const getNumberOfUsersUsersCountGet = <TData = AxiosResponse<number>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/users/count', options);
};

/**
 * @summary Get Number Of Wallets
 */
export const getNumberOfWalletsWalletsCountGet = <
  TData = AxiosResponse<number>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/wallets/count', options);
};

/**
 * @summary Get Or Create Invoice By Order Id
 */
export const getOrCreateInvoiceByOrderIdInvoicesOrderIdOrderIdPost = <
  TData = AxiosResponse<DisplayInvoice>
>(
  orderId: string,
  createInvoice: CreateInvoice,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(`/invoices/order_id/${orderId}`, createInvoice, options);
};

/**
 * @summary Get Or Create Shopify Invoice
 */
export const getOrCreateShopifyInvoiceStoresStoreIdIntegrationsShopifyOrderIdGet =
  <TData = AxiosResponse<unknown>>(
    storeId: string,
    orderId: string,
    parameters: GetOrCreateShopifyInvoiceStoresStoreIdIntegrationsShopifyOrderIdGetParameters,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(`/stores/${storeId}/integrations/shopify/${orderId}`, {
      ...options,
      params: { ...parameters, ...options?.params }
    });
  };

/**
 * @summary Get Payout By Id
 */
export const getPayoutByIdPayoutsModelIdGet = <
  TData = AxiosResponse<DisplayPayout>
>(
  modelId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/payouts/${modelId}`, options);
};

/**
 * @summary Get Payouts
 */
export const getPayoutsPayoutsGet = <
  TData = AxiosResponse<PaginationResponseDisplayPayout>
>(
  parameters?: GetPayoutsGetParameters,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/payouts', {
    ...options,
    params: { ...parameters, ...options?.params }
  });
};

/**
 * @summary Get Plugins
 */
export const getPluginsPluginsGet = <TData = AxiosResponse<unknown>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/plugins', options);
};

/**
 * @summary Get Policies
 */
export const getPoliciesManagePoliciesGet = <TData = AxiosResponse<unknown>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/manage/policies', options);
};

/**
 * @summary Get Product By Id
 */
export const getProductByIdProductsModelIdGet = <
  TData = AxiosResponse<Product>
>(
  modelId: string,
  parameters?: GetProductByIdProductsModelIdGetParameters,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/products/${modelId}`, {
    ...options,
    params: { ...parameters, ...options?.params }
  });
};

/**
 * @summary Get Products
 */
export const getProductsProductsGet = <
  TData = AxiosResponse<PaginationResponseProduct>
>(
  parameters?: GetProductsGetParameters,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/products', {
    ...options,
    params: { ...parameters, ...options?.params }
  });
};

/**
 * @summary Get Refund
 */
export const getRefundInvoicesRefundsRefundIdGet = <
  TData = AxiosResponse<Refund>
>(
  refundId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/invoices/refunds/${refundId}`, options);
};

/**
 * @summary Get Server Settings
 */
export const getServerSettingsConfiguratorServerSettingsPost = <
  TData = AxiosResponse<unknown>
>(
  sSHSettings: SSHSettings,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/configurator/server-settings', sSHSettings, options);
};

/**
 * @summary Get Services
 */
export const getServicesTorServicesGet = <TData = AxiosResponse<unknown>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/tor/services', options);
};

/**
 * @summary Get Stats
 */
export const getStatsUsersStatsGet = <TData = AxiosResponse<unknown>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/users/stats', options);
};

/**
 * @summary Get Store By Id
 */
export const getStoreByIdStoresModelIdGet = <TData = AxiosResponse<unknown>>(
  modelId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/stores/${modelId}`, options);
};

/**
 * @summary Get Store Policies
 */
export const getStorePoliciesManageStoresGet = <
  TData = AxiosResponse<GlobalStorePolicy>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/manage/stores', options);
};

/**
 * @summary Get Store Rates
 */
export const getStoreRatesStoresModelIdRatesGet = <
  TData = AxiosResponse<RatesResponse>
>(
  modelId: string,
  parameters: GetStoreRatesStoresModelIdRatesGetParameters,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/stores/${modelId}/rates`, {
    ...options,
    params: { ...parameters, ...options?.params }
  });
};

/**
 * @summary Get Stores
 */
export const getStoresStoresGet = <
  TData = AxiosResponse<PaginationResponseStore>
>(
  parameters?: GetStoresGetParameters,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/stores', {
    ...options,
    params: { ...parameters, ...options?.params }
  });
};

/**
 * @summary Get Supported Cryptos
 */
export const getSupportedCryptosCryptosSupportedGet = <
  TData = AxiosResponse<unknown>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/cryptos/supported', options);
};

/**
 * @summary Get Syncinfo
 */
export const getSyncinfoManageSyncinfoGet = <TData = AxiosResponse<unknown>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/manage/syncinfo', options);
};

/**
 * @summary Get Template By Id
 */
export const getTemplateByIdTemplatesModelIdGet = <
  TData = AxiosResponse<Template>
>(
  modelId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/templates/${modelId}`, options);
};

/**
 * @summary Get Template List
 */
export const getTemplateListTemplatesListGet = <TData = AxiosResponse<unknown>>(
  parameters?: GetTemplateListTemplatesListGetParameters,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/templates/list', {
    ...options,
    params: { ...parameters, ...options?.params }
  });
};

/**
 * @summary Get Templates
 */
export const getTemplatesTemplatesGet = <
  TData = AxiosResponse<PaginationResponseTemplate>
>(
  parameters?: GetTemplatesGetParameters,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/templates', {
    ...options,
    params: { ...parameters, ...options?.params }
  });
};

/**
 * @summary Get Token Count
 */
export const getTokenCountTokenCountGet = <TData = AxiosResponse<number>>(
  parameters?: GetTokenCountTokenCountGetParameters,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/token/count', {
    ...options,
    params: { ...parameters, ...options?.params }
  });
};

/**
 * @summary Get Tokens Abi
 */
export const getTokensAbiCryptosTokensCurrencyAbiGet = <
  TData = AxiosResponse<unknown>
>(
  currency: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/cryptos/tokens/${currency}/abi`, options);
};

/**
 * @summary Get Tokens
 */
export const getTokensCryptosTokensCurrencyGet = <
  TData = AxiosResponse<unknown>
>(
  currency: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/cryptos/tokens/${currency}`, options);
};

/**
 * @summary Get Tokens
 */
export const getTokensTokenGet = <
  TData = AxiosResponse<PaginationResponseToken>
>(
  parameters?: GetTokensTokenGetParameters,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/token', {
    ...options,
    params: { ...parameters, ...options?.params }
  });
};

/**
 * @summary Get User By Id
 */
export const getUserByIdUsersModelIdGet = <TData = AxiosResponse<DisplayUser>>(
  modelId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/users/${modelId}`, options);
};

/**
 * @summary Get Users
 */
export const getUsersUsersGet = <
  TData = AxiosResponse<PaginationResponseDisplayUser>
>(
  parameters?: GetUsersGetParameters,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/users', {
    ...options,
    params: { ...parameters, ...options?.params }
  });
};

/**
 * @summary Get Wallet Balance
 */
export const getWalletBalanceWalletsModelIdBalanceGet = <
  TData = AxiosResponse<BalanceResponse>
>(
  modelId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/wallets/${modelId}/balance`, options);
};

/**
 * @summary Get Wallet By Id
 */
export const getWalletByIdWalletsModelIdGet = <TData = AxiosResponse<Wallet>>(
  modelId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/wallets/${modelId}`, options);
};

/**
 * @summary Get Wallet Channels
 */
export const getWalletChannelsWalletsModelIdChannelsGet = <
  TData = AxiosResponse<unknown>
>(
  modelId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/wallets/${modelId}/channels`, options);
};

/**
 * @summary Get Wallet Rate
 */
export const getWalletRateWalletsModelIdRateGet = <
  TData = AxiosResponse<unknown>
>(
  modelId: string,
  parameters?: GetWalletRateWalletsModelIdRateGetParameters,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/wallets/${modelId}/rate`, {
    ...options,
    params: { ...parameters, ...options?.params }
  });
};

/**
 * @summary Get Wallets Schema
 */
export const getWalletsSchemaWalletsSchemaGet = <
  TData = AxiosResponse<unknown>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/wallets/schema', options);
};

/**
 * @summary Get Wallets
 */
export const getWalletsWalletsGet = <
  TData = AxiosResponse<PaginationResponseWallet>
>(
  parameters?: GetWalletsGetParameters,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/wallets', {
    ...options,
    params: { ...parameters, ...options?.params }
  });
};

/**
 * @summary Handle File
 */
export const handleFileFilesHandleModelIdGet = <TData = AxiosResponse<unknown>>(
  modelId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/files/handle/${modelId}`, options);
};

/**
 * @summary Install Plugin
 */
export const installPluginPluginsInstallPost = <TData = AxiosResponse<unknown>>(
  bodyInstallPluginPluginsInstallPost: BodyInstallPluginPluginsInstallPost,
  options?: AxiosRequestConfig
): Promise<TData> => {
  const formData = new FormData();
  formData.append('plugin', bodyInstallPluginPluginsInstallPost.plugin);

  return axios.post('/plugins/install', formData, options);
};

/**
 * @summary Modify Discount
 */
export const modifyDiscountDiscountsModelIdPatch = <
  TData = AxiosResponse<Discount>
>(
  modelId: string,
  optionalDiscount: OptionalDiscount,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.patch(`/discounts/${modelId}`, optionalDiscount, options);
};

/**
 * @summary Modify File
 */
export const modifyFileFilesModelIdPatch = <TData = AxiosResponse<File>>(
  modelId: string,
  bodyModifyFileFilesModelIdPatch: BodyModifyFileFilesModelIdPatch,
  options?: AxiosRequestConfig
): Promise<TData> => {
  const formData = new FormData();
  formData.append('file', bodyModifyFileFilesModelIdPatch.file);

  return axios.patch(`/files/${modelId}`, formData, options);
};

/**
 * @summary Modify Invoice
 */
export const modifyInvoiceInvoicesModelIdPatch = <
  TData = AxiosResponse<DisplayInvoice>
>(
  modelId: string,
  optionalInvoice: OptionalInvoice,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.patch(`/invoices/${modelId}`, optionalInvoice, options);
};

/**
 * @summary Modify Notification
 */
export const modifyNotificationNotificationsModelIdPatch = <
  TData = AxiosResponse<Notification>
>(
  modelId: string,
  optionalNotification: OptionalNotification,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.patch(
    `/notifications/${modelId}`,
    optionalNotification,
    options
  );
};

/**
 * @summary Modify Payout
 */
export const modifyPayoutPayoutsModelIdPatch = <
  TData = AxiosResponse<DisplayPayout>
>(
  modelId: string,
  optionalPayout: OptionalPayout,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.patch(`/payouts/${modelId}`, optionalPayout, options);
};

/**
 * @summary Modify Product
 */
export const modifyProductProductsModelIdPatch = <
  TData = AxiosResponse<Product>
>(
  modelId: string,
  bodyModifyProductProductsModelIdPatch: BodyModifyProductProductsModelIdPatch,
  options?: AxiosRequestConfig
): Promise<TData> => {
  const formData = new FormData();
  formData.append('data', bodyModifyProductProductsModelIdPatch.data);
  if (bodyModifyProductProductsModelIdPatch.image !== undefined) {
    formData.append('image', bodyModifyProductProductsModelIdPatch.image);
  }

  return axios.patch(`/products/${modelId}`, formData, options);
};

/**
 * @summary Modify Store
 */
export const modifyStoreStoresModelIdPatch = <TData = AxiosResponse<Store>>(
  modelId: string,
  optionalStore: OptionalStore,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.patch(`/stores/${modelId}`, optionalStore, options);
};

/**
 * @summary Modify Template
 */
export const modifyTemplateTemplatesModelIdPatch = <
  TData = AxiosResponse<Template>
>(
  modelId: string,
  optionalTemplate: OptionalTemplate,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.patch(`/templates/${modelId}`, optionalTemplate, options);
};

/**
 * @summary Modify User
 */
export const modifyUserUsersModelIdPatch = <TData = AxiosResponse<DisplayUser>>(
  modelId: string,
  optionalUser: OptionalUser,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.patch(`/users/${modelId}`, optionalUser, options);
};

/**
 * @summary Modify Wallet
 */
export const modifyWalletWalletsModelIdPatch = <TData = AxiosResponse<Wallet>>(
  modelId: string,
  optionalCreateWallet: OptionalCreateWallet,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.patch(`/wallets/${modelId}`, optionalCreateWallet, options);
};

/**
 * @summary Open Wallet Channel
 */
export const openWalletChannelWalletsModelIdChannelsOpenPost = <
  TData = AxiosResponse<unknown>
>(
  modelId: string,
  openChannelScheme: OpenChannelScheme,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `/wallets/${modelId}/channels/open`,
    openChannelScheme,
    options
  );
};

/**
 * @summary Patch Token
 */
export const patchTokenTokenModelIdPatch = <TData = AxiosResponse<Token>>(
  modelId: string,
  editToken: EditToken,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.patch(`/token/${modelId}`, editToken, options);
};

/**
 * @summary Perform Backup
 */
export const performBackupManageBackupsBackupPost = <
  TData = AxiosResponse<unknown>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/manage/backups/backup', undefined, options);
};

/**
 * @summary Ping Email
 */
export const pingEmailStoresModelIdPingGet = <TData = AxiosResponse<unknown>>(
  modelId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/stores/${modelId}/ping`, options);
};

/**
 * @summary Rate
 */
export const rateCryptosRateGet = <TData = AxiosResponse<unknown>>(
  parameters?: RateCryptosRateGetParameters,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/cryptos/rate', {
    ...options,
    params: { ...parameters, ...options?.params }
  });
};

/**
 * @summary Refund Invoice
 */
export const refundInvoiceInvoicesModelIdRefundsPost = <
  TData = AxiosResponse<Refund>
>(
  modelId: string,
  refundData: RefundData,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(`/invoices/${modelId}/refunds`, refundData, options);
};

/**
 * @summary Register Fido2
 */
export const registerFido2Users2faFido2RegisterBeginPost = <
  TData = AxiosResponse<unknown>
>(
  loginFIDOData: LoginFIDOData,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/users/2fa/fido2/register/begin', loginFIDOData, options);
};

/**
 * @summary Reset Password
 */
export const resetPasswordUsersResetPasswordPost = <
  TData = AxiosResponse<unknown>
>(
  resetPasswordData: ResetPasswordData,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/users/reset_password', resetPasswordData, options);
};

/**
 * @summary Restart Server
 */
export type AllWalletHistoryWalletsHistoryAllGetResult = AxiosResponse<
  TxResponse[]
>;

/**
 * @summary Restore Backup
 */
export const restartServerManageRestartPost = <TData = AxiosResponse<unknown>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/manage/restart', undefined, options);
};

/**
 * @summary Send Verification Email
 */
export type BatchActionTokenBatchPostResult = AxiosResponse<unknown>;

/**
 * @summary Set Backup Policies
 */
export const restoreBackupManageBackupsRestorePost = <
  TData = AxiosResponse<unknown>
>(
  bodyRestoreBackupManageBackupsRestorePost: BodyRestoreBackupManageBackupsRestorePost,
  options?: AxiosRequestConfig
): Promise<TData> => {
  const formData = new FormData();
  formData.append('backup', bodyRestoreBackupManageBackupsRestorePost.backup);

  return axios.post('/manage/backups/restore', formData, options);
};

/**
 * @summary Set Policies
 */
export type BatchActionsOnDiscountsDiscountsBatchPostResult =
  AxiosResponse<unknown>;

/**
 * @summary Set Settings
 */
export const sendVerificationEmailUsersVerifyPost = <
  TData = AxiosResponse<unknown>
>(
  verifyEmailData: VerifyEmailData,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/users/verify', verifyEmailData, options);
};

/**
 * @summary Set Store Checkout Settings
 */
export type BatchActionsOnFilesFilesBatchPostResult = AxiosResponse<unknown>;

/**
 * @summary Set Store Plugin Settings
 */
export const setBackupPoliciesManageBackupsPost = <
  TData = AxiosResponse<BackupsPolicy>
>(
  backupsPolicy: BackupsPolicy,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/manage/backups', backupsPolicy, options);
};

/**
 * @summary Set Store Policies
 */
export type BatchActionsOnInvoicesInvoicesBatchPostResult =
  AxiosResponse<unknown>;

/**
 * @summary Verify Totp
 */
export const setPoliciesManagePoliciesPost = <TData = AxiosResponse<Policy>>(
  policy: Policy,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/manage/policies', policy, options);
};

/**
 * @summary Set Store Rate Rules
 */
export type BatchActionsOnNotificationsNotificationsBatchPostResult =
  AxiosResponse<unknown>;

/**
 * @summary Set Store Theme Settings
 */
export const setSettingsUsersMeSettingsPost = <TData = AxiosResponse<User>>(
  userPreferences: UserPreferences,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/users/me/settings', userPreferences, options);
};

/**
 * @summary Submit Refund
 */
export type BatchActionsOnPayoutsPayoutsBatchPostResult =
  AxiosResponse<unknown>;

/**
 * @summary Test Email Ping
 */
export const setStoreCheckoutSettingsStoresModelIdCheckoutSettingsPatch = <
  TData = AxiosResponse<Store>
>(
  modelId: string,
  storeCheckoutSettings: StoreCheckoutSettings,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.patch(
    `/stores/${modelId}/checkout_settings`,
    storeCheckoutSettings,
    options
  );
};

/**
 * @summary Uninstall Plugin
 */
export type BatchActionsOnProductsProductsBatchPostResult =
  AxiosResponse<unknown>;

/**
 * @summary Update Invoice
 */
export const setStorePluginSettingsStoresModelIdPluginSettingsPatch = <
  TData = AxiosResponse<Store>
>(
  modelId: string,
  storePluginSettings: StorePluginSettings,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.patch(
    `/stores/${modelId}/plugin_settings`,
    storePluginSettings,
    options
  );
};

/**
 * @summary Update Payment Details
 */
export type BatchActionsOnStoresStoresBatchPostResult = AxiosResponse<unknown>;

/**
 * @summary Update Server
 */
export const setStorePoliciesManageStoresPost = <
  TData = AxiosResponse<GlobalStorePolicy>
>(
  globalStorePolicy: GlobalStorePolicy,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/manage/stores', globalStorePolicy, options);
};

/**
 * @summary Wallet History
 */
export type BatchActionsOnTemplatesTemplatesBatchPostResult =
  AxiosResponse<unknown>;

/**
 * @summary Wallet Lnpay
 */
export const verifyTotpUsers2faTotpVerifyPost = <
  TData = AxiosResponse<unknown>
>(
  verifyTOTP: VerifyTOTP,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/users/2fa/totp/verify', verifyTOTP, options);
};

export type BatchActionsOnUsersUsersBatchPostResult = AxiosResponse<unknown>;
export type BatchActionsOnWalletsWalletsBatchPostResult =
  AxiosResponse<unknown>;
export const setStoreRateRulesStoresModelIdRateRulesPatch = <
  TData = AxiosResponse<unknown>
>(
  modelId: string,
  setStoreRateRulesStoresModelIdRateRulesPatchBody: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.patch(
    `/stores/${modelId}/rate_rules`,
    setStoreRateRulesStoresModelIdRateRulesPatchBody,
    options
  );
};
export type CategoriesProductsCategoriesGetResult = AxiosResponse<unknown>;
export const setStoreThemeSettingsStoresModelIdThemeSettingsPatch = <
  TData = AxiosResponse<Store>
>(
  modelId: string,
  storeThemeSettings: StoreThemeSettings,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.patch(
    `/stores/${modelId}/theme_settings`,
    storeThemeSettings,
    options
  );
};
export type ChangePasswordUsersPasswordPostResult = AxiosResponse<unknown>;
export const submitRefundInvoicesRefundsRefundIdSubmitPost = <
  TData = AxiosResponse<Refund>
>(
  refundId: string,
  submitRefundData: SubmitRefundData,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `/invoices/refunds/${refundId}/submit`,
    submitRefundData,
    options
  );
};
export type CheckDnsEntryConfiguratorDnsResolveGetResult =
  AxiosResponse<unknown>;
export const testEmailPingManageTestpingGet = <TData = AxiosResponse<unknown>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get('/manage/testping', options);
};
export type CheckUpdatesUpdateCheckGetResult = AxiosResponse<unknown>;
export const uninstallPluginPluginsUninstallPost = <
  TData = AxiosResponse<unknown>
>(
  uninstallPluginData: UninstallPluginData,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/plugins/uninstall', uninstallPluginData, options);
};
export type CheckWalletLightningWalletsModelIdChecklnGetResult =
  AxiosResponse<unknown>;
export const updateInvoiceInvoicesModelIdCustomerPatch = <
  TData = AxiosResponse<DisplayInvoice>
>(
  modelId: string,
  customerUpdateData: CustomerUpdateData,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.patch(
    `/invoices/${modelId}/customer`,
    customerUpdateData,
    options
  );
};
export type CleanupImagesManageCleanupImagesPostResult = AxiosResponse<unknown>;
export const updatePaymentDetailsInvoicesModelIdDetailsPatch = <
  TData = AxiosResponse<unknown>
>(
  modelId: string,
  methodUpdateData: MethodUpdateData,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.patch(`/invoices/${modelId}/details`, methodUpdateData, options);
};
export type CleanupLogsManageCleanupLogsPostResult = AxiosResponse<unknown>;
export const updateServerManageUpdatePost = <TData = AxiosResponse<unknown>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post('/manage/update', undefined, options);
};
export type CleanupServerManageCleanupPostResult = AxiosResponse<unknown>;
export const walletHistoryWalletsHistoryModelIdGet = <
  TData = AxiosResponse<TxResponse[]>
>(
  modelId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/wallets/history/${modelId}`, options);
};
export type CloseWalletChannelWalletsModelIdChannelsClosePostResult =
  AxiosResponse<unknown>;
export type CreateDiscountDiscountsPostResult = AxiosResponse<Discount>;
export const walletLnpayWalletsModelIdLnpayPost = <
  TData = AxiosResponse<unknown>
>(
  modelId: string,
  lNPayScheme: LNPayScheme,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(`/wallets/${modelId}/lnpay`, lNPayScheme, options);
};
export type CreateFileFilesPostResult = AxiosResponse<File>;
export type CreateInvoiceInvoicesPostResult = AxiosResponse<DisplayInvoice>;
export type CreateNotificationNotificationsPostResult =
  AxiosResponse<Notification>;
export type CreateOauth2TokenTokenOauth2PostResult = AxiosResponse<unknown>;
export type CreatePayoutPayoutsPostResult = AxiosResponse<DisplayPayout>;
export type CreateProductProductsPostResult = AxiosResponse<Product>;
export type CreateStoreStoresPostResult = AxiosResponse<Store>;
export type CreateTemplateTemplatesPostResult = AxiosResponse<Template>;
export type CreateTokenFido2BeginToken2faFido2BeginPostResult =
  AxiosResponse<unknown>;
export type CreateTokenFido2CompleteToken2faFido2CompletePostResult =
  AxiosResponse<unknown>;
export type CreateTokenTokenPostResult = AxiosResponse<unknown>;
export type CreateTokenTotpAuthToken2faTotpPostResult = AxiosResponse<unknown>;
export type CreateUserUsersPostResult = AxiosResponse<CreateUserWithToken>;
export type CreateWalletWalletsCreatePostResult = AxiosResponse<unknown>;
export type CreateWalletWalletsPostResult = AxiosResponse<Wallet>;
export type DeleteDiscountDiscountsModelIdDeleteResult =
  AxiosResponse<Discount>;
export type DeleteFileFilesModelIdDeleteResult = AxiosResponse<File>;
export type DeleteInvoiceInvoicesModelIdDeleteResult =
  AxiosResponse<DisplayInvoice>;
export type DeleteLogManageLogsLogDeleteResult = AxiosResponse<unknown>;
export type DeleteNotificationNotificationsModelIdDeleteResult =
  AxiosResponse<Notification>;
export type DeletePayoutPayoutsModelIdDeleteResult =
  AxiosResponse<DisplayPayout>;
export type DeleteProductProductsModelIdDeleteResult = AxiosResponse<Product>;
export type DeleteStoreStoresModelIdDeleteResult = AxiosResponse<Store>;
export type DeleteTemplateTemplatesModelIdDeleteResult =
  AxiosResponse<Template>;
export type DeleteTokenTokenModelIdDeleteResult = AxiosResponse<Token>;
export type DeleteUserUsersModelIdDeleteResult = AxiosResponse<DisplayUser>;
export type DeleteWalletWalletsModelIdDeleteResult = AxiosResponse<Wallet>;
export type DisableTotpUsers2faDisablePostResult = AxiosResponse<unknown>;
export type DownloadBackupManageBackupsDownloadFileIdGetResult =
  AxiosResponse<unknown>;
export type ExportInvoicesInvoicesExportGetResult = AxiosResponse<unknown>;
export type Fido2CompleteRegistrationUsers2faFido2RegisterCompletePostResult =
  AxiosResponse<unknown>;
export type Fido2DeleteDeviceUsers2faFido2DeviceIdDeleteResult =
  AxiosResponse<unknown>;
export type FinalizeEmailVerificationUsersVerifyFinalizeCodePostResult =
  AxiosResponse<unknown>;
export type FinalizePasswordResetUsersResetPasswordFinalizeCodePostResult =
  AxiosResponse<unknown>;
export type GenerateDeploymentConfiguratorDeployPostResult =
  AxiosResponse<unknown>;
export type GetBackupFrequenciesManageBackupsFrequenciesGetResult =
  AxiosResponse<unknown>;
export type GetBackupPoliciesManageBackupsGetResult =
  AxiosResponse<BackupsPolicy>;
export type GetBackupProvidersManageBackupsProvidersGetResult =
  AxiosResponse<unknown>;
export type GetBalancesWalletsBalanceGetResult = AxiosResponse<string>;
export type GetCryptosCryptosGetResult = AxiosResponse<unknown>;
export type GetCurrentTokenTokenCurrentGetResult = AxiosResponse<Token>;
export type GetDaemonsManageDaemonsGetResult = AxiosResponse<unknown>;
export type GetDefaultExplorerCryptosExplorerCurrencyGetResult =
  AxiosResponse<unknown>;
export type GetDefaultRpcCryptosRpcCurrencyGetResult = AxiosResponse<unknown>;
export type GetDeployResultConfiguratorDeployResultDeployIdGetResult =
  AxiosResponse<unknown>;
export type GetDiscountByIdDiscountsModelIdGetResult = AxiosResponse<Discount>;
export type GetDiscountsDiscountsGetResult =
  AxiosResponse<PaginationResponseDiscount>;
export type GetFiatlistCryptosFiatlistGetResult = AxiosResponse<unknown>;
export type GetFileByIdFilesModelIdGetResult = AxiosResponse<File>;
export type GetFilesFilesGetResult = AxiosResponse<PaginationResponseFile>;
export type GetInvoiceByIdInvoicesModelIdGetResult =
  AxiosResponse<DisplayInvoice>;
export type GetInvoicesInvoicesGetResult =
  AxiosResponse<PaginationResponseDisplayInvoice>;
export type GetLogContentsManageLogsLogGetResult = AxiosResponse<unknown>;
export type GetLogsListManageLogsGetResult = AxiosResponse<unknown>;
export type GetMaxProductPriceProductsMaxpriceGetResult =
  AxiosResponse<unknown>;
export type GetMeUsersMeGetResult = AxiosResponse<DisplayUser>;
export type GetNotificationByIdNotificationsModelIdGetResult =
  AxiosResponse<Notification>;
export type GetNotificationsNotificationsGetResult =
  AxiosResponse<PaginationResponseNotification>;
export type GetNotificationsNotificationsListGetResult = AxiosResponse<unknown>;
export type GetNotificationsSchemaNotificationsSchemaGetResult =
  AxiosResponse<unknown>;
export type GetNumberOfDiscountsDiscountsCountGetResult = AxiosResponse<number>;
export type GetNumberOfFilesFilesCountGetResult = AxiosResponse<number>;
export type GetNumberOfInvoicesInvoicesCountGetResult = AxiosResponse<number>;
export type GetNumberOfNotificationsNotificationsCountGetResult =
  AxiosResponse<number>;
export type GetNumberOfPayoutsPayoutsCountGetResult = AxiosResponse<number>;
export type GetNumberOfProductsProductsCountGetResult = AxiosResponse<number>;
export type GetNumberOfStoresStoresCountGetResult = AxiosResponse<number>;
export type GetNumberOfTemplatesTemplatesCountGetResult = AxiosResponse<number>;
export type GetNumberOfUsersUsersCountGetResult = AxiosResponse<number>;
export type GetNumberOfWalletsWalletsCountGetResult = AxiosResponse<number>;
export type GetOrCreateInvoiceByOrderIdInvoicesOrderIdOrderIdPostResult =
  AxiosResponse<DisplayInvoice>;
export type GetOrCreateShopifyInvoiceStoresStoreIdIntegrationsShopifyOrderIdGetResult =
  AxiosResponse<unknown>;
export type GetPayoutByIdPayoutsModelIdGetResult = AxiosResponse<DisplayPayout>;
export type GetPayoutsPayoutsGetResult =
  AxiosResponse<PaginationResponseDisplayPayout>;
export type GetPluginsPluginsGetResult = AxiosResponse<unknown>;
export type GetPoliciesManagePoliciesGetResult = AxiosResponse<unknown>;
export type GetProductByIdProductsModelIdGetResult = AxiosResponse<Product>;
export type GetProductsProductsGetResult =
  AxiosResponse<PaginationResponseProduct>;
export type GetRefundInvoicesRefundsRefundIdGetResult = AxiosResponse<Refund>;
export type GetServerSettingsConfiguratorServerSettingsPostResult =
  AxiosResponse<unknown>;
export type GetServicesTorServicesGetResult = AxiosResponse<unknown>;
export type GetStatsUsersStatsGetResult = AxiosResponse<unknown>;
export type GetStoreByIdStoresModelIdGetResult = AxiosResponse<unknown>;
export type GetStorePoliciesManageStoresGetResult =
  AxiosResponse<GlobalStorePolicy>;
export type GetStoreRatesStoresModelIdRatesGetResult =
  AxiosResponse<RatesResponse>;
export type GetStoresStoresGetResult = AxiosResponse<PaginationResponseStore>;
export type GetSupportedCryptosCryptosSupportedGetResult =
  AxiosResponse<unknown>;
export type GetSyncinfoManageSyncinfoGetResult = AxiosResponse<unknown>;
export type GetTemplateByIdTemplatesModelIdGetResult = AxiosResponse<Template>;
export type GetTemplateListTemplatesListGetResult = AxiosResponse<unknown>;
export type GetTemplatesTemplatesGetResult =
  AxiosResponse<PaginationResponseTemplate>;
export type GetTokenCountTokenCountGetResult = AxiosResponse<number>;
export type GetTokensAbiCryptosTokensCurrencyAbiGetResult =
  AxiosResponse<unknown>;
export type GetTokensCryptosTokensCurrencyGetResult = AxiosResponse<unknown>;
export type GetTokensTokenGetResult = AxiosResponse<PaginationResponseToken>;
export type GetUserByIdUsersModelIdGetResult = AxiosResponse<DisplayUser>;
export type GetUsersUsersGetResult =
  AxiosResponse<PaginationResponseDisplayUser>;
export type GetWalletBalanceWalletsModelIdBalanceGetResult =
  AxiosResponse<BalanceResponse>;
export type GetWalletByIdWalletsModelIdGetResult = AxiosResponse<Wallet>;
export type GetWalletChannelsWalletsModelIdChannelsGetResult =
  AxiosResponse<unknown>;
export type GetWalletRateWalletsModelIdRateGetResult = AxiosResponse<unknown>;
export type GetWalletsSchemaWalletsSchemaGetResult = AxiosResponse<unknown>;
export type GetWalletsWalletsGetResult =
  AxiosResponse<PaginationResponseWallet>;
export type HandleFileFilesHandleModelIdGetResult = AxiosResponse<unknown>;
export type InstallPluginPluginsInstallPostResult = AxiosResponse<unknown>;
export type ModifyDiscountDiscountsModelIdPatchResult = AxiosResponse<Discount>;
export type ModifyFileFilesModelIdPatchResult = AxiosResponse<File>;
export type ModifyInvoiceInvoicesModelIdPatchResult =
  AxiosResponse<DisplayInvoice>;
export type ModifyNotificationNotificationsModelIdPatchResult =
  AxiosResponse<Notification>;
export type ModifyPayoutPayoutsModelIdPatchResult =
  AxiosResponse<DisplayPayout>;
export type ModifyProductProductsModelIdPatchResult = AxiosResponse<Product>;
export type ModifyStoreStoresModelIdPatchResult = AxiosResponse<Store>;
export type ModifyTemplateTemplatesModelIdPatchResult = AxiosResponse<Template>;
export type ModifyUserUsersModelIdPatchResult = AxiosResponse<DisplayUser>;
export type ModifyWalletWalletsModelIdPatchResult = AxiosResponse<Wallet>;
export type OpenWalletChannelWalletsModelIdChannelsOpenPostResult =
  AxiosResponse<unknown>;
export type PatchTokenTokenModelIdPatchResult = AxiosResponse<Token>;
export type PerformBackupManageBackupsBackupPostResult = AxiosResponse<unknown>;
export type PingEmailStoresModelIdPingGetResult = AxiosResponse<unknown>;
export type RateCryptosRateGetResult = AxiosResponse<unknown>;
export type RefundInvoiceInvoicesModelIdRefundsPostResult =
  AxiosResponse<Refund>;
export type RegisterFido2Users2faFido2RegisterBeginPostResult =
  AxiosResponse<unknown>;
export type ResetPasswordUsersResetPasswordPostResult = AxiosResponse<unknown>;
export type RestartServerManageRestartPostResult = AxiosResponse<unknown>;
export type RestoreBackupManageBackupsRestorePostResult =
  AxiosResponse<unknown>;
export type SendVerificationEmailUsersVerifyPostResult = AxiosResponse<unknown>;
export type SetBackupPoliciesManageBackupsPostResult =
  AxiosResponse<BackupsPolicy>;
export type SetPoliciesManagePoliciesPostResult = AxiosResponse<Policy>;
export type SetSettingsUsersMeSettingsPostResult = AxiosResponse<User>;
export type SetStoreCheckoutSettingsStoresModelIdCheckoutSettingsPatchResult =
  AxiosResponse<Store>;
export type SetStorePluginSettingsStoresModelIdPluginSettingsPatchResult =
  AxiosResponse<Store>;
export type SetStorePoliciesManageStoresPostResult =
  AxiosResponse<GlobalStorePolicy>;
export type SetStoreRateRulesStoresModelIdRateRulesPatchResult =
  AxiosResponse<unknown>;
export type SetStoreThemeSettingsStoresModelIdThemeSettingsPatchResult =
  AxiosResponse<Store>;
export type SubmitRefundInvoicesRefundsRefundIdSubmitPostResult =
  AxiosResponse<Refund>;
export type TestEmailPingManageTestpingGetResult = AxiosResponse<unknown>;
export type UninstallPluginPluginsUninstallPostResult = AxiosResponse<unknown>;
export type UpdateInvoiceInvoicesModelIdCustomerPatchResult =
  AxiosResponse<DisplayInvoice>;
export type UpdatePaymentDetailsInvoicesModelIdDetailsPatchResult =
  AxiosResponse<unknown>;
export type UpdateServerManageUpdatePostResult = AxiosResponse<unknown>;
export type VerifyTotpUsers2faTotpVerifyPostResult = AxiosResponse<unknown>;
export type WalletHistoryWalletsHistoryModelIdGetResult = AxiosResponse<
  TxResponse[]
>;
export type WalletLnpayWalletsModelIdLnpayPostResult = AxiosResponse<unknown>;
